# Simple workflow for deploying static content to GitHub Pages
# Only runs manually so we don't push accidentally, but probably could be auto
name: Deploy to pages
on:
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# There is a way to download artifacts between workflows
# But we'll just run the build in here too for now since it's easier
jobs:
  build:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
    # checkout code
    - uses: actions/checkout@v3

    # Useful if we want to use multiple versions of node?
    - name: Using node ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'

    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: .angular/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-angular-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: ${{ runner.os }}-angular-${{ hashFiles('**/yarn.lock') }}-

    - name: Install
      # dont update lockfile here
      run: yarn --frozen-lockfile

    - name: Build
      run: yarn run build

    - name: Upload dist
      uses: actions/upload-pages-artifact@v1
      with:
        path: dist/mst-golfing
        retention-days: 1

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
